Литература
lecture 01
• CXX20 ISO/IEC 14882 – "Information technology – Programming languages – C++", 2020
• 𝑆𝐵 Bjarne Stroustrup, The C++ Programming Language (4th Edition) , 2013
• С11 ISO/IEC 9899 – "Information technology – rogramming languages – C", 2011
• 𝐾&𝑅 Brian W. Kernighan, Dennis Ritchie – The C programming language, 1988
• 𝐿𝑆 Stanley Lippman, The C++ Primer (5th Edition), 2012

lecture 04
• 𝐺𝐵 Grady Booch – Object-Oriented Analysis and Design with Applications, 2007
• 𝐺𝐶𝑇 Eberly, Schneider – Geometric Tools for Computer Graphics, 2002
• 𝐺𝑆 Gilbert Strang – Introduction to Linear Algebra, Fifth Edition, 2016
• 𝐶𝑜𝑟𝑚𝑒𝑛 Thomas H. Cormen – Introduction to Algorithms, 2009
• 𝑇𝐴𝑂𝐶𝑃 Donald E. Knuth – The Art of Computer Programming, 2011

lecture 05
• 𝐸𝐷 Edsger W. Dijkstra – Go To Statement Considered Harmful, 1968
• 𝐸𝐷𝐻 Edsger W. Dijkstra – The Humble Programmer, ACM Turing Lecture, 1972
• 𝑆𝑀 Scott Meyers, "Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14"
• 𝐾𝑉𝑅 Kris van Rens – Understanding value categories in C++, C++ Dublin User Group, 2020

lecture 06
there are no books for this lecture. Only cppcon lectures.


lecture 07
•𝐿𝑃 Stanley B. Lippman – Inside the C++ Object Model, 1996
•𝐿𝐵 Barbara Liskov – Keynote address - data abstraction and hierarchy, 1987
•𝐷𝐵 Alfred Aho, Jeffrey Ullman – Compilers: Principles, Techniques, and Tools (2nd Edition), 2006
•𝐴𝑢𝑡 Jeffrey Ullman – Automata Theory online course, lagunita.stanford.edu
•𝐶𝑜𝑚𝑝 Alex Aiken – Compilers online course, lagunita.stanford.edu

lecture 08
Tom Cargill, Exception handling: a false sense of security, C++Report '1994
David Abrahams, Exception-safety in generic components '1998
Herb Sutter, Exceptional C++: 47 engineering puzzles, programming problems, and solutions, Addison-Wesley, 2000
Herb Sutter, More exceptional C++: 40 new engineering puzzles, programming problems, and solutions, Addison-Wesley, 2002
Arne Mertz, Modern C++ features – keyword `noexcept`, blog post, Jan'2016
Niall Douglas, Mongrel Monads, ACCU'2017
Nico Brailovsky, Exception handling internals 

lecture 09
•𝑀𝐷𝑃 Robert Martin – Design Principles and Design Patterns, 2000
•𝐾𝐵 Kent Beck – TDD by example, 2000
•𝐺𝑂𝐹 Gamma, Helm, Johnson, Vlissides – Design Patterns: Elements of Reusable Object-oriented Software, 2003
•𝑆𝑀 Martin Reddy – API design for C++, 2011
•𝐷𝐵 Steve McConnell – Code Complete: A Practical Handbook of Software Construction, 1993

lecture 10
John M. Kessenich, Graham Seller, Dave Shreiner – OpenGL Programming Guide: The Official Guide to Learning OpenGL, 9-th edition, 2016
Parminder Singh – Learning Vulkan, Packt, 2016
Alexander Overvoorde – Vulkan Tutorial, self-published, 2020
Dustin Land – Getting explicit: How Hard is Vulkan really, GDC 2018
Jason Ekstrand – What Can Vulkan do for You?, The Linux Foundation, 2017
Michael Worcester – Getting Started with Vulkan, The Khronos Group, 2017
Karl Shultz – Vulkan Tutorial, DevU 2017

lecture 11
•𝑂𝐶𝐿2 The OpenCL Specification v2.2, 2019
•𝑇𝑀 Timothy Mattson – OpenCL Programming guide, 2011
•𝑀𝑆 Matthew Scarpino – OpenCL in Action, 2011
•𝑅𝐵 Ravishekhar Banger – OpenCL Programming by Example, 2013
•𝐷𝐾 David Kaeli – Heterogeneous Computing with OpenCL 2.0, 2015
•𝐽𝐾 John Kessenich – OpenGL Programming Guide, Version 4.5, 2016

lecture 12
•𝑉𝐽 Davide Vandevoorde, Nicolai M. Josuttis – C++ Templates. The Complete Guide, 2nd edition, Addison-Wesley Professional, 2017


lecture 13
same as lecture 12

lecture 14
• Nicolai M. Josuttis, The C++ Standard Library - A Tutorial and Reference, 2nd Edition , Addison-Wesley, 2012
• Scott Meyers, Effective STL, 50 specific ways to improve your use of the standard template library, Addison-Wesley, 2001
• Bindal A., Narang P., Indu S., Map vs. Unordered Map: An Analysis on Large Datasets, International Journal of Computer Applications, Volume 127, №2, oct'2015
• boost::flat_map and its performance compared to map and unordered_map, StackOverflow,
https://stackoverflow.com/questions/21166675/boostflat-map-and-its-performance-compared-to-map-and-
unordered-map

lecture 15
• Scott Meyers – Effective Modern C++, O'Reilly, 2014
• Davide Vandevoorde, Nicolai M. Josuttis – C++ Templates. The Complete Guide, 2nd edition, Addison-Wesley Professional, 2017

lecture 16
• Chris Lattner – LLVM: A Compilation Framework for Lifelong Program Analysis &
Transformation, CGO'2004
• Mike Shah – Introduction to LLVM, Fosdem'2018
• Bridgers, Piovezan – LLVM IR Tutorial, EuroLLVM'2019
• Kaleidoscope language tutorial

lecture 17
• Sean Parent – C++ Seasoning, GoingNative'2013


CppCon:
lecture 02
• 𝐵𝐵 Ben Saks – Back to Basics: Pointers and Memory, CppCon, 2020

lecture 03 or 04
• 𝐶𝐵 Charles Bay – Instruction Re-ordering Everywhere: The C++ 'As-If' Rule and the Role
of Sequence, CppCon, 2016

lecture 05
• 𝑁𝐽 Nicolai Josuttis – The Nightmare of Move Semantics for Trivial Classes, 2017 cppcon
• 𝐾𝐼 Klaus Iglberger – Back to Basics: Move Semantics, CppCon, 2019
• 𝐴𝐷 RAII and the Rule of Zero - Arthur O'Dwyer, CppCon, 2019

lecture 06
• 𝑇𝑊 Titus Winters – Modern C++ Design, CppCon, 2018
• 𝐽𝐺 Joshua Gerrard – The dangers of C-style casts, CppCon, 2015
• 𝐵𝐷 Ben Deane – Operator Overloading: History, Principles and Practice, CppCon, 2018
• 𝐽𝑀 Jonathan Müller – Using C++20's Three-way Comparison <=>, CppCon, 2019

lecture 08
Jon Kalb, Exception Safe code (3 parts), CppCon'2014

lecture 09
• Breaking Dependencies: The SOLID Principles - Klaus Iglberger - CppCon 2020

lecture 12
•𝑆𝑀 Scott Meyers "Type Deduction and Why You Care", CppCon, 2014
•𝐵𝑆 Bob Steagall "Back to Basics: Templates" (2 parts), CppCon, 2021

lecture 13
•𝑆𝑀 Scott Meyers "Type Deduction and Why You Care", CppCon, 2014

lecture 14
• Matt Kulukundis "Designing a Fast, Efficient, Cache-friendly Hash Table, Step by Step", CppCon'2017

lecture 15
• Casey Carter – Iterator Haiku, CppCon, 2016
• Patrick Niedzelski – Building and Extending the Iterator Hierarchy in a Modern, Multicore World, CppCon, 2016

lecture 17
• Sean Parent – Better Code: Data Structures, CppCon'2015
• Marshall Clow – STL Algorithms - why you should use them, and how to write your own, CppCon'2016
• Jonathan Boccara – 105 STL Algorithms in Less Than an Hour, CppCon'2018
• Ben Dean – Constructing Generic Algorithms: Principles and Practice - Ben Deane, CppCon'2020
• Sean Parent – Warning: std::find() is Broken!, CppCon'2021




